#include "imports/stdlib.fc";

cell load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_ref()  ;; recv_code
  );
}

const WORKCHAIN = 0;

cell pack_recv_data(cell recv_code) inline {
  return begin_cell()
    .store_ref(recv_code)
  .end_cell();
}

cell calculate_recv_state_init(cell recv_code) inline {
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(recv_code)
    .store_dict(pack_recv_data(recv_code))
    .store_uint(0, 1)
  .end_cell();
}

slice calculate_recv_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
    .store_int(WORKCHAIN, 8)
    .store_uint(cell_hash(state_init), 256)
  .end_cell().begin_parse();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }
    ~dump(1);
    var addr = in_msg_body~load_msg_addr();
    cell recv_code = load_data();
    cell state_init = calculate_recv_state_init(recv_code);
    slice to_address = calculate_recv_address(state_init);
    var msg_body = begin_cell()
        .store_uint(0x12345678, 32)
        .store_uint(123, 64)
        .end_cell();
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(to_address)
      .store_coins(0)
      .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
      .store_ref(state_init)
      .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 64);
    ~dump(3);
}
